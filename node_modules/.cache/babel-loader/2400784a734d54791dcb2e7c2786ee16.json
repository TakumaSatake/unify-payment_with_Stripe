{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gold2\\\\techpit\\\\unify-payment_with_Stripe\\\\src\\\\components\\\\home\\\\CheckoutForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from \"react-router-dom\";\nimport PaymentForm from './PaymentForm';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"お支払いが完了しました!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"少し待っててください\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\n          break;\n\n        default:\n          setMessage(\"問題が発生しました\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true); // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\n    // 認証が必要な支払いの場合、\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\n    // 認証プロセス完了後、return_urlへリダイレクトされる\n\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/\"\n      }\n    }); // 即時エラーの処理\n    // カード情報等が拒否された時などに、エラーを返す\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n    navigate('/PaymentForm'); // 画面遷移\n  };\n\n  return (\n    /*#__PURE__*/\n    // <Router>\n    //   <Routes>\n    React.createElement(\"form\", {\n      id: \"payment-form\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PaymentElement, {\n      id: \"payment-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"button-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner\",\n      id: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 30\n      }\n    }) : \"お支払い\")), message && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"payment-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }\n    }, message)) //   {/* </Routes>\n    // </Router> */}\n\n  );\n}","map":{"version":3,"sources":["C:/Users/gold2/techpit/unify-payment_with_Stripe/src/components/home/CheckoutForm.jsx"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","PaymentForm","CheckoutForm","stripe","elements","navigate","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\n\r\nimport PaymentForm from './PaymentForm';\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"お支払いが完了しました!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"少し待っててください\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\r\n          break;\r\n        default:\r\n          setMessage(\"問題が発生しました\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\r\n    // 認証が必要な支払いの場合、\r\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\r\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\r\n    // 認証プロセス完了後、return_urlへリダイレクトされる\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: \"http://localhost:3000/\",\r\n      },\r\n    });\r\n\r\n    // 即時エラーの処理\r\n    // カード情報等が拒否された時などに、エラーを返す\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n\r\n    navigate('/PaymentForm'); // 画面遷移\r\n\r\n  };\r\n\r\n  return (\r\n    // <Router>\r\n    //   <Routes>\r\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n          <PaymentElement id=\"payment-element\" />\r\n          {/* <Router> */}\r\n            <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n              <span id=\"button-text\">\r\n                {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"お支払い\"}\r\n              </span>\r\n              {/* <Routes>\r\n                <Route path=\"./PaymentFrom\" element={<PaymentForm />} />\r\n              </Routes> */}\r\n            </button>\r\n          {/* </Router> */}\r\n          {/* Show any error or success messages */}\r\n          {message && <div id=\"payment-message\">{message}</div>}\r\n        </form>\r\n    //   {/* </Routes>\r\n    // </Router> */}\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}