{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gold2\\\\techpit\\\\unify-payment_with_Stripe\\\\src\\\\components\\\\home\\\\PaymentDialog.tsx\";\nimport * as React from 'react';\nimport ReactModal from 'react-modal';\nexport class PaymentDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.handleClose();\n    };\n\n    this.handleChangeUsername = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n\n    this.handleOpen = () => {// ここで設定情報などを読み込む\n    };\n\n    this.handleClose = () => {\n      var _this$props$onClose, _this$props;\n\n      // 親コンポーネントにダイアログを閉じてもらうためのコールバック通知\n      (_this$props$onClose = (_this$props = this.props).onClose) === null || _this$props$onClose === void 0 ? void 0 : _this$props$onClose.call(_this$props);\n    };\n\n    this.customStyles = {\n      // ダイアログ内のスタイル（中央に表示）\n      content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n      },\n      // 親ウィンドウのスタイル（ちょっと暗くする）\n      overlay: {\n        background: 'rgba(0, 0, 0, 0.2)'\n      }\n    };\n    this.state = {\n      username: ''\n    };\n    ReactModal.setAppElement('body');\n  } // useEffect(() => {\n  //   if (!stripe) {\n  //     return;\n  //   }\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\n  //     \"payment_intent_client_secret\"\n  //   );\n  //   if (!clientSecret) {\n  //     return;\n  //   }\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n  //     switch (paymentIntent.status) {\n  //       case \"succeeded\":\n  //         setMessage(\"お支払いが完了しました!\");\n  //         break;\n  //       case \"processing\":\n  //         setMessage(\"処理中です\");\n  //         break;\n  //       case \"requires_payment_method\":\n  //         setMessage(\"お支払いができませんでした　もう一度試してください\");\n  //         break;\n  //       default:\n  //         setMessage(\"問題が発生しました\");\n  //         break;\n  //     }\n  //   });\n  // }, [stripe]);\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   if (!stripe || !elements) {\n  //     // Stripe.js has not yet loaded.\n  //     // Make sure to disable form submission until Stripe.js has loaded.\n  //     return;\n  //   }\n  //   setIsLoading(true);\n  //   const { error } = await stripe.confirmPayment({\n  //     elements,\n  //     confirmParams: {\n  //       // Make sure to change this to your payment completion page\n  //       return_url: \"http://localhost:3000\",\n  //     },\n  //   });\n  //   // This point will only be reached if there is an immediate error when\n  //   // confirming the payment. Otherwise, your customer will be redirected to\n  //   // your `return_url`. For some payment methods like iDEAL, your customer will\n  //   // be redirected to an intermediate site first to authorize the payment, then\n  //   // redirected to the `return_url`.\n  //   if (error.type === \"card_error\" || error.type === \"validation_error\") {\n  //     setMessage(error.message);\n  //   } else {\n  //     setMessage(\"An unexpected error occured.\");\n  //   }\n  //   setIsLoading(false);\n  // };\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(ReactModal, {\n      isOpen: this.props.isOpen,\n      onAfterOpen: this.handleOpen,\n      onRequestClose: this.handleClose,\n      style: this.customStyles,\n      contentLabel: \"Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"\\u304A\\u5E97\\u304C\\u5C0E\\u5165\\u3057\\u3066\\u3044\\u308B\\u6C7A\\u6E08\\u30B5\\u30FC\\u30D3\\u30B9\\u3092\\u9078\\u3093\\u3067\\u304F\\u3060\\u3055\\u3044\"))));\n  } // フォームのサブミット時にダイアログを閉じる\n\n\n}","map":{"version":3,"sources":["C:/Users/gold2/techpit/unify-payment_with_Stripe/src/components/home/PaymentDialog.tsx"],"names":["React","ReactModal","PaymentDialog","Component","constructor","props","handleSubmit","event","preventDefault","handleClose","handleChangeUsername","setState","username","target","value","handleOpen","onClose","customStyles","content","top","left","right","bottom","marginRight","transform","overlay","background","state","setAppElement","render","isOpen"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAaA,OAAO,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA0D;AAC/DC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AADwB,SA4FlBC,YA5FkB,GA4FFC,KAAD,IAA6C;AAClEA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,WAAL;AACD,KA/FyB;;AAAA,SAiGlBC,oBAjGkB,GAiGMH,KAAD,IAAgD;AAC7E,WAAKI,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEL,KAAK,CAACM,MAAN,CAAaC;AAAxB,OAAd;AACD,KAnGyB;;AAAA,SAsGlBC,UAtGkB,GAsGL,MAAM,CACzB;AACD,KAxGyB;;AAAA,SA2GlBN,WA3GkB,GA2GJ,MAAM;AAAA;;AAC1B;AACA,iDAAKJ,KAAL,EAAWW,OAAX;AACD,KA9GyB;;AAAA,SAiHlBC,YAjHkB,GAiHgB;AACxC;AACAC,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAE,KADE;AAEPC,QAAAA,IAAI,EAAE,KAFC;AAGPC,QAAAA,KAAK,EAAE,MAHA;AAIPC,QAAAA,MAAM,EAAE,MAJD;AAKPC,QAAAA,WAAW,EAAE,MALN;AAMPC,QAAAA,SAAS,EAAE;AANJ,OAF+B;AAUxC;AACAC,MAAAA,OAAO,EAAE;AACPC,QAAAA,UAAU,EAAE;AADL;AAX+B,KAjHhB;AAExB,SAAKC,KAAL,GAAa;AACXf,MAAAA,QAAQ,EAAE;AADC,KAAb;AAIAX,IAAAA,UAAU,CAAC2B,aAAX,CAAyB,MAAzB;AACD,GAR8D,CAU/D;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEOC,EAAAA,MAAM,GAAoB;AAC/B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL,oBAAC,UAAD;AACE,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWyB,MADrB;AAEE,MAAA,WAAW,EAAE,KAAKf,UAFpB;AAGE,MAAA,cAAc,EAAE,KAAKN,WAHvB;AAIE,MAAA,KAAK,EAAE,KAAKQ,YAJd;AAKE,MAAA,YAAY,EAAC,UALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE;AAAM,MAAA,QAAQ,EAAE,KAAKX,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oJADF,CAPF,CADK,CAAP;AAeD,GA1F8D,CA4F/D;;;AA5F+D","sourcesContent":["import * as React from 'react';\r\nimport ReactModal from 'react-modal';\r\n\r\ninterface Props {\r\n  /** このダイアログを表示するなら true */\r\n  isOpen: boolean;\r\n  /** このダイアログを閉じるときのコールバック */\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface State {\r\n  username: string;\r\n}\r\n\r\nexport class PaymentDialog extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      username: ''\r\n    };\r\n\r\n    ReactModal.setAppElement('body');\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   if (!stripe) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\r\n  //     \"payment_intent_client_secret\"\r\n  //   );\r\n\r\n  //   if (!clientSecret) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n  //     switch (paymentIntent.status) {\r\n  //       case \"succeeded\":\r\n  //         setMessage(\"お支払いが完了しました!\");\r\n  //         break;\r\n  //       case \"processing\":\r\n  //         setMessage(\"処理中です\");\r\n  //         break;\r\n  //       case \"requires_payment_method\":\r\n  //         setMessage(\"お支払いができませんでした　もう一度試してください\");\r\n  //         break;\r\n  //       default:\r\n  //         setMessage(\"問題が発生しました\");\r\n  //         break;\r\n  //     }\r\n  //   });\r\n  // }, [stripe]);\r\n\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n\r\n  //   if (!stripe || !elements) {\r\n  //     // Stripe.js has not yet loaded.\r\n  //     // Make sure to disable form submission until Stripe.js has loaded.\r\n  //     return;\r\n  //   }\r\n\r\n  //   setIsLoading(true);\r\n\r\n  //   const { error } = await stripe.confirmPayment({\r\n  //     elements,\r\n  //     confirmParams: {\r\n  //       // Make sure to change this to your payment completion page\r\n  //       return_url: \"http://localhost:3000\",\r\n  //     },\r\n  //   });\r\n\r\n  //   // This point will only be reached if there is an immediate error when\r\n  //   // confirming the payment. Otherwise, your customer will be redirected to\r\n  //   // your `return_url`. For some payment methods like iDEAL, your customer will\r\n  //   // be redirected to an intermediate site first to authorize the payment, then\r\n  //   // redirected to the `return_url`.\r\n  //   if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n  //     setMessage(error.message);\r\n  //   } else {\r\n  //     setMessage(\"An unexpected error occured.\");\r\n  //   }\r\n\r\n  //   setIsLoading(false);\r\n  // };\r\n\r\n  public render(): React.ReactNode {\r\n    return <div>\r\n      <ReactModal\r\n        isOpen={this.props.isOpen}\r\n        onAfterOpen={this.handleOpen}\r\n        onRequestClose={this.handleClose}\r\n        style={this.customStyles}\r\n        contentLabel=\"Settings\"\r\n      >\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            お店が導入している決済サービスを選んでください\r\n          </label>\r\n        </form>\r\n      </ReactModal>\r\n    </div>;\r\n  }\r\n\r\n  // フォームのサブミット時にダイアログを閉じる\r\n  private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    this.handleClose();\r\n  }\r\n\r\n  private handleChangeUsername = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({username: event.target.value})\r\n  }\r\n\r\n  // ダイアログが開いたときに呼び出される\r\n  private handleOpen = () => {\r\n    // ここで設定情報などを読み込む\r\n  }\r\n\r\n  // ダイアログ領域外のクリックや、ESCキーを押したときに呼び出される\r\n  private handleClose = () => {\r\n    // 親コンポーネントにダイアログを閉じてもらうためのコールバック通知\r\n    this.props.onClose?.();\r\n  }\r\n\r\n  // スタイルのカスタマイズ\r\n  private customStyles: ReactModal.Styles = {\r\n    // ダイアログ内のスタイル（中央に表示）\r\n    content: {\r\n      top: '50%',\r\n      left: '50%',\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      marginRight: '-50%',\r\n      transform: 'translate(-50%, -50%)'\r\n    },\r\n    // 親ウィンドウのスタイル（ちょっと暗くする）\r\n    overlay: {\r\n      background: 'rgba(0, 0, 0, 0.2)'\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}