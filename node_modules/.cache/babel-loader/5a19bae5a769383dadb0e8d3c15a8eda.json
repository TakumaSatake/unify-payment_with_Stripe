{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gold2\\\\techpit\\\\unify-payment_with_Stripe\\\\src\\\\components\\\\home\\\\CheckoutForm.jsx\";\nimport React, { useState } from \"react\"; // import {\n//   PaymentElement,\n//   useStripe,\n//   useElements\n// } from \"@stripe/react-stripe-js\";\n\nimport { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from \"react-router-dom\";\nimport PaymentForm from './PaymentForm';\nexport default function CheckoutForm() {\n  // const stripe = useStripe();\n  // const elements = useElements();\n  // const navigate = useNavigate();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // useEffect(() => {\n  //   if (!stripe) {\n  //     return;\n  //   }\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\n  //     \"payment_intent_client_secret\"\n  //   );\n  //   if (!clientSecret) {\n  //     return;\n  //   }\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n  //     switch (paymentIntent.status) {\n  //       case \"succeeded\":\n  //         setMessage(\"お支払いが完了しました!\");\n  //         break;\n  //       case \"processing\":\n  //         setMessage(\"少し待っててください\");\n  //         break;\n  //       case \"requires_payment_method\":\n  //         setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\n  //         break;\n  //       default:\n  //         setMessage(\"問題が発生しました\");\n  //         break;\n  //     }\n  //   });\n  // }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //   if (!stripe || !elements) {\n    //     // Stripe.js has not yet loaded.\n    //     // Make sure to disable form submission until Stripe.js has loaded.\n    //     return;\n    //   }\n    //   setIsLoading(true);\n    // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\n    // 認証が必要な支払いの場合、\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\n    // 認証プロセス完了後、return_urlへリダイレクトされる\n    // const { error } = await stripe.confirmPayment({\n    //   elements,\n    //   confirmParams: {\n    //     // Make sure to change this to your payment completion page\n    //     return_url: \"http://localhost:3000/\",\n    //   },\n    // });\n    // 即時エラーの処理\n    // カード情報等が拒否された時などに、エラーを返す\n    // if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    //   setMessage(error.message);\n    // } else {\n    //   setMessage(\"An unexpected error occured.\");\n    // }\n    // setIsLoading(false);\n    // navigate('/PaymentForm'); // 画面遷移\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 32\n    }\n  }) : \"お支払い\"), /*#__PURE__*/React.createElement(Route, {\n    path: \"./PaymentFrom\",\n    element: /*#__PURE__*/React.createElement(PaymentForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 54\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/gold2/techpit/unify-payment_with_Stripe/src/components/home/CheckoutForm.jsx"],"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","useNavigate","PaymentForm","CheckoutForm","message","setMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;AACA;AACA;;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,kBANP;AAQA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,GAAwB;AACrC;AACA;AAEA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C,CAPqC,CAUrC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMa,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF,GADgC,CAGlC;AACA;AACA;AACA;AACA;AAEA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAED,GApCD;;AAsCA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAEF,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,EAAE,EAAC,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,gBAAG;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,EAAE,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAkD,MAD9D,CADF,eAIE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,eAAZ;AAA4B,IAAA,OAAO,eAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CALJ,CADD,CADH,CADF;AAwBD","sourcesContent":["import React, { useState } from \"react\";\r\n// import {\r\n//   PaymentElement,\r\n//   useStripe,\r\n//   useElements\r\n// } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\n\r\nimport PaymentForm from './PaymentForm';\r\n\r\nexport default function CheckoutForm() {\r\n  // const stripe = useStripe();\r\n  // const elements = useElements();\r\n\r\n  // const navigate = useNavigate();\r\n  \r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (!stripe) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\r\n  //     \"payment_intent_client_secret\"\r\n  //   );\r\n\r\n  //   if (!clientSecret) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n  //     switch (paymentIntent.status) {\r\n  //       case \"succeeded\":\r\n  //         setMessage(\"お支払いが完了しました!\");\r\n  //         break;\r\n  //       case \"processing\":\r\n  //         setMessage(\"少し待っててください\");\r\n  //         break;\r\n  //       case \"requires_payment_method\":\r\n  //         setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\r\n  //         break;\r\n  //       default:\r\n  //         setMessage(\"問題が発生しました\");\r\n  //         break;\r\n  //     }\r\n  //   });\r\n  // }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n  //   if (!stripe || !elements) {\r\n  //     // Stripe.js has not yet loaded.\r\n  //     // Make sure to disable form submission until Stripe.js has loaded.\r\n  //     return;\r\n  //   }\r\n\r\n  //   setIsLoading(true);\r\n\r\n    // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\r\n    // 認証が必要な支払いの場合、\r\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\r\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\r\n    // 認証プロセス完了後、return_urlへリダイレクトされる\r\n    // const { error } = await stripe.confirmPayment({\r\n    //   elements,\r\n    //   confirmParams: {\r\n    //     // Make sure to change this to your payment completion page\r\n    //     return_url: \"http://localhost:3000/\",\r\n    //   },\r\n    // });\r\n\r\n    // 即時エラーの処理\r\n    // カード情報等が拒否された時などに、エラーを返す\r\n    // if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n    //   setMessage(error.message);\r\n    // } else {\r\n    //   setMessage(\"An unexpected error occured.\");\r\n    // }\r\n\r\n    // setIsLoading(false);\r\n\r\n    // navigate('/PaymentForm'); // 画面遷移\r\n\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n       <Routes>\r\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n          {/* <PaymentElement id=\"payment-element\" /> */}\r\n          {/* <Router> */}\r\n            {/* <button disabled={isLoading || !stripe || !elements} id=\"submit\"> */}\r\n            \r\n            <Routes>\r\n              <button>\r\n                <span id=\"button-text\">\r\n                  {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"お支払い\"}\r\n                </span>\r\n                <Route path=\"./PaymentFrom\" element={<PaymentForm />} />\r\n              </button>\r\n            </Routes>\r\n          {/* </Router> */}\r\n          {/* Show any error or success messages */}\r\n          {/* {message && <div id=\"payment-message\">{message}</div>} */}\r\n        </form>\r\n       </Routes>\r\n    </Router> \r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}