{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gold2\\\\techpit\\\\unify-payment_with_Stripe\\\\src\\\\components\\\\home\\\\CheckoutForm.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { PaymentDialog } from './PaymentDialog';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"お支払いが完了しました!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"処理中です\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"お支払いができませんでした　もう一度試してください\");\n          break;\n\n        default:\n          setMessage(\"問題が発生しました\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000\"\n      }\n    }); // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n  }; // ダイアログを開く\n\n\n  const openDialog = () => {\n    setIsDialogOpen(true);\n  }; // ダイアログからのコールバックでダイアログを閉じてあげる\n\n\n  const closeDialog = () => {\n    setIsDialogOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    onClick: this.openDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 24\n    }\n  }) : \"お支払い\")), /*#__PURE__*/React.createElement(PaymentDialog, {\n    isOpen: this.isDialogOpen,\n    onClose: this.closeDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"sources":["C:/Users/gold2/techpit/unify-payment_with_Stripe/src/components/home/CheckoutForm.tsx"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","PaymentDialog","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","isDialogOpen","setIsDialogOpen","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","openDialog","closeDialog"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\nimport {PaymentDialog} from './PaymentDialog';\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"お支払いが完了しました!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"処理中です\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"お支払いができませんでした　もう一度試してください\");\r\n          break;\r\n        default:\r\n          setMessage(\"問題が発生しました\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: \"http://localhost:3000\",\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n  \r\n  // ダイアログを開く\r\n  const openDialog = () => {\r\n    setIsDialogOpen(true);\r\n  }\r\n\r\n  // ダイアログからのコールバックでダイアログを閉じてあげる\r\n  const closeDialog = () => {\r\n    setIsDialogOpen(false);\r\n  }\r\n\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <PaymentElement id=\"payment-element\" />\r\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\" onClick={this.openDialog}>\r\n        <span id=\"button-text\">\r\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"お支払い\"}\r\n        </span>\r\n      </button>\r\n      <PaymentDialog isOpen={this.isDialogOpen} onClose={this.closeDialog} />\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}