{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gold2\\\\techpit\\\\unify-payment_with_Stripe\\\\src\\\\components\\\\home\\\\CheckoutForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport PaymentForm from './PaymentForm';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // useEffect(() => {\n  //   if (!stripe) {\n  //     return;\n  //   }\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\n  //     \"payment_intent_client_secret\"\n  //   );\n  //   if (!clientSecret) {\n  //     return;\n  //   }\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n  //     switch (paymentIntent.status) {\n  //       case \"succeeded\":\n  //         setMessage(\"お支払いが完了しました!\");\n  //         break;\n  //       case \"processing\":\n  //         setMessage(\"少し待っててください\");\n  //         break;\n  //       case \"requires_payment_method\":\n  //         setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\n  //         break;\n  //       default:\n  //         setMessage(\"問題が発生しました\");\n  //         break;\n  //     }\n  //   });\n  // }, [stripe]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true); // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\n    // 認証が必要な支払いの場合、\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\n    // 認証プロセス完了後、return_urlへリダイレクトされる\n\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/\"\n      }\n    }); // 即時エラーの処理\n    // カード情報等が拒否された時などに、エラーを返す\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsLoading(false);\n    history.push('/PaymentForm'); // 画面遷移\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 26\n    }\n  }) : \"お支払い\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"sources":["C:/Users/gold2/techpit/unify-payment_with_Stripe/src/components/home/CheckoutForm.jsx"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","BrowserRouter","Router","Routes","Route","Navigate","PaymentForm","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","history","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,yBAJP;AAKA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,QAJF,QAKO,kBALP;AAOA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C,CALqC,CAOrC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMiB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACR,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAEDI,IAAAA,YAAY,CAAC,IAAD,CAAZ,CATgC,CAWhC;AACA;AACA;AACA;AACA;;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAY,MAAMT,MAAM,CAACU,cAAP,CAAsB;AAC5CT,MAAAA,QAD4C;AAE5CU,MAAAA,aAAa,EAAE;AACb;AACAC,QAAAA,UAAU,EAAE;AAFC;AAF6B,KAAtB,CAAxB,CAhBgC,CAwBhC;AACA;;AACA,QAAIH,KAAK,CAACI,IAAN,KAAe,YAAf,IAA+BJ,KAAK,CAACI,IAAN,KAAe,kBAAlD,EAAsE;AACpEV,MAAAA,UAAU,CAACM,KAAK,CAACP,OAAP,CAAV;AACD,KAFD,MAEO;AACLC,MAAAA,UAAU,CAAC,8BAAD,CAAV;AACD;;AAEDE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAS,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb,EAlCgC,CAkCF;AAE/B,GApCD;;AAsCA,sBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAET,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,EAAE,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGI;AAAQ,IAAA,QAAQ,EAAEF,SAAS,IAAI,CAACJ,MAAd,IAAwB,CAACC,QAA3C;AAAqD,IAAA,EAAE,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,EAAE,EAAC,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,SAAS,gBAAG;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,EAAE,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAkD,MAD9D,CADF,CAHJ,EAaGF,OAAO,iBAAI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,OAA3B,CAbd,CADF;AAkBD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n} from \"react-router-dom\";\r\n\r\nimport PaymentForm from './PaymentForm';\r\n\r\nexport default function CheckoutForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   if (!stripe) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\r\n  //     \"payment_intent_client_secret\"\r\n  //   );\r\n\r\n  //   if (!clientSecret) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n  //     switch (paymentIntent.status) {\r\n  //       case \"succeeded\":\r\n  //         setMessage(\"お支払いが完了しました!\");\r\n  //         break;\r\n  //       case \"processing\":\r\n  //         setMessage(\"少し待っててください\");\r\n  //         break;\r\n  //       case \"requires_payment_method\":\r\n  //         setMessage(\"ごめんなさい、お支払いできませんでした...　もう一度試してみてください\");\r\n  //         break;\r\n  //       default:\r\n  //         setMessage(\"問題が発生しました\");\r\n  //         break;\r\n  //     }\r\n  //   });\r\n  // }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    // 支払い完了後にStripeがユーザーをリダイレクトする場所を渡す。\r\n    // 認証が必要な支払いの場合、\r\n    // Stripe は 3D セキュア認証のためのモーダルを表示するか、\r\n    // 支払い方法に応じて顧客を認証ページにリダイレクトする。\r\n    // 認証プロセス完了後、return_urlへリダイレクトされる\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: \"http://localhost:3000/\",\r\n      },\r\n    });\r\n\r\n    // 即時エラーの処理\r\n    // カード情報等が拒否された時などに、エラーを返す\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n\r\n    history.push('/PaymentForm'); // 画面遷移\r\n\r\n  };\r\n\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <PaymentElement id=\"payment-element\" />\r\n      {/* <Router> */}\r\n        <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n          <span id=\"button-text\">\r\n            {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"お支払い\"}\r\n          </span>\r\n          {/* <Routes>\r\n            <Route path=\"./PaymentFrom\" element={<PaymentForm />} />\r\n          </Routes> */}\r\n         </button>\r\n      {/* </Router> */}\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}